
@{
    ViewBag.Title = "BoardView";
}

@*
    view 설계 계획
    1.좌측 상단 게시물 갯수 표시(왼쪽 정렬) : 갯수 강조 표시
    2.우측 상단 검색 기능 추가(오른쪽 정렬)
        2-1 드롭다운 : 검색 기준 (제목, 본문)
        2-2 입력창 : 검색 내용 입력창
        2-3 버튼 : 검색 버튼(내용 있을 때만 검색)
            2-3-1 검색 내용 없을 때 내용 입력 알림 띄우기
            2-3-2 검색 결과 없을 때 검색 결과 없음 알림 띄우기
    3.중앙 게시판 리스트
        3-1 내용 표시 테이블 : 한번에 10개 까지 표시, 최근 게시물이 상단으로 오도록 내용 표시
            3-1-1 thead : 번호, 제목, 작성일
            3-1-2 tbody
                1 번호 : 가장 오래된 게시물부터 오름차순으로 번호 매겨짐
                2 제목 : 왼쪽 정렬로 제목 표시, 오른쪽 정렬로 수정, 삭제 버튼
                    1 수정 버튼 클릭 시
                        1 수정 입력창 : 기존 제목과 본문 내용 표시
                        2 저장 버튼 누르면 업데이트 후 창 닫기, 취소 버튼 누르면 창 닫기
                    2 삭제 버튼 클릭 시
                        알림 창으로 삭제 동의 후 삭제
                    3 제목 클릭 시
                        내용 알림으로 표시
                3 작성일 : yy-MM-dd 형식으로 표시
        3-2 페이지 이동 버튼(가운데 정렬) : 최근 게시물이 첫페이지에 오도록 표시
            3-2-1 빠른이동
                1 좌측 버튼 클릭 시 첫 페이지로 이동
                2 우측 버튼 클릭 시 마지막 페이지로 이동
            3-2-2 전후이동
                1 좌측 버튼 클릭 시 이전 페이지로 이동
                2 우측 버튼 클릭 시 다음 페이지로 이동
            3-2-3 숫자이동 : 5개씩 표시
                1 현재 페이지
                    1 강조 표시
                    2 현재 페이지가 가운데 오도록 표시(예외 : 앞 페이지와 뒷 페이지가 2개 미만일 때는 최대한 가운데 오도록만 표시)
                2 다른 숫자 페이지
                    1 해당 페이지로 이동
        3-3 등록 버튼(오른쪽 정렬)
            3-3-1 등록 버튼 클릭 시
                1 등록 입력창 : 제목과 본문 내용 비어있는 입력창 표시
                2 저장 버튼 누르면 등록 후 창 닫기, 취소 버튼 누르면 창 닫기
*@
<style>
    /*전체*/
    .div-samerow, #page-btn-group div, #page-btn-numbers div{
        display: inline-block;
    }
    /*상단*/
    /*갯수표시*/
    #board_count span {
        color: red;
    }
    /*드롭다운*/
    /*.dropdown {
        position: relative;
        display: inline-block;
    }

    .dropdown-content {
        display: none;
        position: absolute;
        z-index: 1;*/ /*다른 요소들보다 앞에 배치*/
    /*}

    .dropdown-content div {
            display: block;
    }

    .dropdown:hover .dropdown-content {
        display: block;
    }*/
    /*입력창*/
    /*#textarea {
        -moz-appearance: textfield-multiline;
        -webkit-appearance: textarea;
        border: 1px solid gray;
        font: medium -moz-fixed;
        font: -webkit-small-control;
        height: 28px;
        overflow: auto;
        padding: 2px;
        resize: both;
        width: 400px;
    }

    #input {
        -moz-appearance: textfield;
        -webkit-appearance: textfield;
        background-color: white;
        background-color: -moz-field;
        border: 1px solid darkgray;
        box-shadow: 1px 1px 1px 0 lightgray inset;
        font: -moz-field;
        font: -webkit-small-control;
        margin-top: 5px;
        padding: 2px 3px;
        width: 398px;
    }*/
    /*중앙*/
    #board {
        width: 500px;
    }

    #current-page-number {
        color: red;
    }
    /*하단*/
</style>


<script>
    $(function () {
        init();
    });

    //common
    let setDivBtnLink = function (select, link) {
        $(document).on('click', select, function () {
            $(location).attr("href", link);
        });
    }

    //init
    var init = function () {
        //setDivBtnLink("#create-btn", "/Board/CreateView")//등록버튼

        //페이지 이동 버튼 이벤트 추가

        $("#first-btn").on('click', function () {
            let page = 1;
            board.setnumberpage(page);
        });
        $("#quickprev-btn").on('click', function () {
            let page = board.nowpage - board.quickpagesize;
            if (page < 1) page = 1;
            board.setnumberpage(page);
        });
        $("#prev-btn").on('click', function () {
            let page = board.nowpage - 1;
            if (page < 1) page = 1;
            board.setnumberpage(page);
        });
        $("#next-btn").on('click', function () {
            let page = board.nowpage + 1;
            if (page > board.totalpage) page = board.totalpage;
            board.setnumberpage(page);
        });
        $("#quicknext-btn").on('click', function () {
            let page = board.nowpage + board.quickpagesize;
            if (page > board.totalpage) page = board.totalpage;
            board.setnumberpage(page);
        });
        $("#last-btn").on('click', function () {
            board.setnumberpage(board.totalpage);
        });

        ////정렬 버튼 이벤트 추가
        //$("#th-title").on('click', function () {
        //    board.clickOrder("#th-title");
        //});

        //$("#th-regdate").on('click', function () {
        //    board.clickOrder("#th-regdate");
        //});
        board.init();
    }

    let clickCURD = function ($this, curd) {
        let url = '';
        let board_id;
        if (curd != 'c') board_id = $($this).attr('board_id');
        switch (curd) {
            case 'c':
                url = '/Board/CreateView';
                break;
            case 'u':
                url = '/Board/EditView?board_id=' + board_id;
                break;
            case 'r':
                url = '/Board/ReadView?board_id=' + board_id;
                break;
            case 'd':
                url = '/Board/DeleteView?board_id="' + board_id;
                break;
            default:
                console.log('지정되지 않은 버튼입니다.');
                return;
        }

        window.location.href = '/Board/CreateView';
        //setDivBtnLink($this, url);
    }

    var board = {
        title: "제목",
        total: 200,
        nowpage: 1,
        setpage: 1,//이동할 페이지 넘버
        pagesize: 10,// 한 페이지에 표시할 글의 수
        totalpage: 1,// 전체 페이지 수
        quickpagesize: 5,// 빠른 이동페이지 수, 한번에 표시될 페이지 버튼 수
        searchvalue: "",
        searchcolum: "",
        order: "IDX",
        isDesc: "y",
        init: function () {
            this.nowpage = 1;
            this.setnumberpage(1);
        },
        setPageView: function () {
            this.getCount();
        },
        getCount: function () {

            var params = {
                colum: this.searchcolum,
                param: this.searchvalue
            }
            var that = this;

            // ajax 통신
            // ajax 를 실행하고 나서 동기화를 하지않으면, 쓰레드가 분기된다.
            $.ajax({
                type: "POST",            // HTTP method type(GET, POST) 형식이다.
                url: "/Board/GetCount",      // 컨트롤러에서 대기중인 URL 주소이다.
                data: params,            // Json 형식의 데이터이다.
                success: function (res) { // 비동기통신의 성공일경우 success콜백으로 들어옵니다. 'res'는 응답받은 데이터이다.
                    // 응답코드 > 0000
                    console.log("count success");
                    var json = JSON.parse(res);
                    that.setCount(json);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) { // 비동기 통신이 실패할경우 error 콜백으로 들어옵니다.
                    alert("통신 실패.");
                }
            });
        },
        setCount: function (json) {
            this.total = json.count;
            this.totalpage = Math.ceil(this.total / this.pagesize);
            this.getlist(this.setpage);
            $("#board_count span").text(this.total);
        },
        getlist: function (page) {

            var params = {
                setPage: page,
                pagesize: this.pagesize,
                colum: this.searchcolum,
                param: this.searchvalue,
                order: this.order,
                isDesc: this.isDesc
            }

            var that = this;

            // ajax 통신
            // ajax 를 실행하고 나서 동기화를 하지않으면, 쓰레드가 분기된다.
            $.ajax({
                type: "POST",            // HTTP method type(GET, POST) 형식이다.
                url: "/Board/GetList",      // 컨트롤러에서 대기중인 URL 주소이다.
                data: params,            // Json 형식의 데이터이다.
                success: function (res) { // 비동기통신의 성공일경우 success콜백으로 들어옵니다. 'res'는 응답받은 데이터이다.
                    // 응답코드 > 0000
                    console.log("success");
                    var list = JSON.parse(res);
                    console.log(list);
                    that.setlist(list);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) { // 비동기 통신이 실패할경우 error 콜백으로 들어옵니다.
                    alert("통신 실패.");
                }
            });
        },
        setlist: function (obj) {
            $("#board tbody").html("");
            let that = this;
            let count = 0;
            $.each(obj, function (idx, item) {
                //string format 형식으로 바꾸기, 자주 사용하는 기능들 미리 만들어 두고 불러서 쓰기(common script  comm.js)
                let num = 0;
                if (that.isDesc == "y") {
                    num = that.total - ((that.setpage - 1) * that.pagesize) - count;
                }
                else {
                    num = ((that.setpage - 1) * that.pagesize) + count + 1;
                }
                $("#board tbody").append('<tr><td>' + num.toString() + '</td><td onclick="window.location.href = \'/Board/ReadView/?board_id=' + item["IDX"] + '\'">' + item["TITLE"] + '</td><td>' + item["REGDATESTRING"] + '</td></tr>');
                count++;
            });
            this.nowpage = this.setpage;
            this.setpagebtnlist();
        },
        search: function () {
            let colum = $("#search-dropdown").val();
            let param = $("#search-input").val();

            if (colum == "") alert("검색기준을 선택해 주세요.");
            else if (param == "") alert("검색할 내용을 입력해 주세요.");
            else {
                this.searchcolum = colum;
                this.searchvalue = param;
                this.init();
            }
        },
        refreshpage: function () {
            this.setpage = this.nowpage;
            this.setPageView();
        },
        prevpage: function (movepage) {
            if (this.nowpage - movepage > 1) this.setpage = this.nowpage - movepage;
            else this.setpage = 1;
            this.setPageView();
        },
        nextpage: function (movepage) {
            if (this.nowpage + movepage <= this.totalpage) this.setpage = this.nowpage + movepage;
            else this.setpage = this.totalpage;
            this.setPageView();
        },
        setnumberpage: function (pagenumber) {
            if (pagenumber == this.nowpage) this.refreshpage();
            else if (pagenumber < this.nowpage) this.prevpage(this.nowpage - pagenumber);
            else this.nextpage(pagenumber - this.nowpage);
        },
        setpagebtnlist: function () {
            let that = this;
            let halfpagesize = Math.floor(that.quickpagesize / 2);

            let pageNum = 0;
            if (that.nowpage < halfpagesize + 1) pageNum = 1;
            else if (halfpagesize > that.totalpage - that.nowpage) pageNum = that.totalpage - that.quickpagesize + 1;
            else pageNum = that.nowpage - halfpagesize;

            $("#page-btn-numbers").html("");
            for (var i = 0; i < this.quickpagesize; i++) {
                if (pageNum > that.totalpage) break;

                if (pageNum == that.nowpage) $("#page-btn-numbers").append('<div id="current-page-number" onclick="clickNumber(this)" pageNum="' + pageNum + '">' + pageNum + '</div>');
                else $("#page-btn-numbers").append('<div onclick="clickNumber(this)" pageNum="' + pageNum + '">' + pageNum + '</div>');
                pageNum++;
            }
        }
    };

    let clickNumber =  function($this) {
        let num = $($this).attr('pageNum');
        board.setnumberpage(num);
    }

    let clickOrder = function ($this) {

        console.log("click order");

        let order = $($this).attr('orderName');
        if (board.order == order) {
            let desc = $($this).attr('isdesc');
            if (desc != board.isDesc) $($this).attr('isdesc', board.isDesc);
            if (desc == "y") $($this).attr('isdesc', "n");
            else $($this).attr('isdesc', "y");
        }
        else board.order = order;
        board.isDesc = $($this).attr('isdesc');
        board.init();
    }
</script>

<!--전체 콘텐츠-->
<div>
    <!--상단 콘텐츠-->
    <div>
        <!--게시물 갯수 표시-->
        <div id="board_count" class="div-samerow">
            총 <span>10</span>건의 게시물
        </div>
        <!--게시물 검색-->
        <div class="div-samerow">
            <!--드롭다운-->
            <div class="div-samerow">
                <ul type="none">
                    <li>
                        <label for="search">검색기준 선택</label>
                        <select id="search-dropdown" name="dropdown">
                            <option value="TITLE">제목</option>
                            <option value="CONTENTS">본문</option>
                        </select>
                    </li>
                </ul>
            </div>
            <!--입력창-->
            <div><input id="search-input" type="text" class="div-samerow" name="search" /></div>
            <!--버튼-->
            <div class="div-samerow" onclick="board.search()">검색</div>
        </div>
    </div>
    <!--중앙 콘텐츠-->
    <div>
        <!--게시물 테이블-->
        <div>
            <table id="board">
                <colgroup>
                    <col width="10%" />
                    <col width="*" />
                    <col width="20%" />
                </colgroup>
                <thead>
                    <tr>
                        <th onclick="clickOrder(this)" orderName="IDX" isdesc ="y"번호</th>
                        <th onclick="clickOrder(this)" orderName="TITLE" isdesc ="n">제목</th>
                        <th onclick="clickOrder(this)" orderName="IDX" isdesc ="y">작성일</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th>1</th>
                        <td>Mark</td>
                        <td>Otto</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <!--하단 콘텐츠-->
    <div>
        <!--페이지 버튼-->
        <div id="page-btn-group" class="div-samerow">
            <div id="first-btn"><<</div>
            <div id="quickprev-btn"><</div>
            <div id="prev-btn">이전</div>
            <div id="page-btn-numbers">
                <div>1</div>
            </div>
            <div id="next-btn">다음</div>
            <div id="quicknext-btn">></div>
            <div id="last-btn">>></div>
        </div>
        <!--등록 버튼-->
        <div class="div-samerow" onclick="window.location.href = '/Board/CreateView'">등록</div>
        @*<div class="div-samerow" onclick="clickCURD(this, 'c')">등록</div>*@
    </div>
</div>